openapi: 3.0.4 # OAS 버전
info:
  title: 할일 관리 API
  description: 회원가입 및 로그인 기능과 할일을 관리하는 기능을 제공하는 API
  version: 0.1.0 # Semantic Versioning
tags:
  - name: 사용자
    description: 사용자 관련 API
  - name: 인증
    description: 인증 관련 API
  - name: 할일
    description: 할일 관련 API

paths:
  # 사용자 관련 API
  /users:
    get:
      tags:
        - 사용자
      operationId: getUserList
      summary: 전체 사용자 페이지네이션 조회
      description: "기본적으로는 등록일 기준 내림차순 정렬, \
      페이지 1번, 한 페이지 사용자 정보 10개씩 조회"
      parameters:
        - name: page
          description: 조회하려는 페이지
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          description: 한 페이지에 포함시킬 사용자 수
          in: query
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            example: "createdAt,desc"
            default: "createdAt,desc"
      responses:
        '200':
          description: 정상 조회
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags:
        - 사용자
      operationId: saveUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 정상 등록
          headers:
            Location:
              description: 등록된 사용자 URI
              schema:
                $ref: '#/components/schemas/UserResponse'
        '409':
          description: 같은 (이메일, 이름) 쌍으로 등록한 사용자 존재
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                title: Conflict
                detail: 해당 이메일과 이름으로 가입한 사용자가 있습니다.
                status: 409
                instance: /users
                errors: []

  # 세션을 사용하여 id를 식별한다고 하면
  # 이 경로는 모두 자신의 정보로 연결되게 해서
  # 403 에러를 없앨 수 있지 않을까?
  # -> 맞다. 세션을 구현할 때 수정해보자.
  /users/{userId}:
    get:
      tags:
        - 사용자
      operationId: findUserById
      summary: 고유 식별자로 사용자 조회
      description: DB의 id로 사용자를 조회한다.
      parameters:
        - $ref: '#/components/parameters/UserIdInPath'
      responses:
        200:
          description: 정상 조회
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        403:
          $ref: '#/components/responses/Forbidden'
    patch:
      tags:
        - 사용자
      operationId: updateUserById
      summary: 사용자 정보를 변경
      description: 자신의 비밀번호를 변경할 수 있다.
      parameters:
        - $ref: '#/components/parameters/UserIdInPath'
      responses:
        200:
          description: 정상 수정
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        403:
          $ref: '#/components/responses/Forbidden'
    delete:
      tags:
        - 사용자
      operationId: deleteUserById
      summary: 사용자 삭제
      description: 사용자를 DB에서 삭제한다.
      parameters:
        - $ref: '#/components/parameters/UserIdInPath'
      responses:
        204:
          description: 정상 삭제
        403:
          $ref: '#/components/responses/Forbidden'


  # Todo: 인증 API
  # Todo: 할일 API


components:
  schemas:
    # 사용자 API의 요청 객체
    # 사용자 생성 요청 객체
    CreateUserRequest:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/email'
        password:
          $ref: '#/components/schemas/password'
        name:
          $ref: '#/components/schemas/username'
      required: [email, password, name]
    # 사용자 수정 요청 객체
    UpdateUserRequest:
      type: object
      properties:
        password:
          $ref: '#/components/schemas/password'
      example:
        name: "TrueGod"
    # 사용자 정보 응답 객체
    UserResponse:
      allOf:
        - type: object
          properties:
            email:
              $ref: '#/components/schemas/email'
            name:
              $ref: '#/components/schemas/username'
        - $ref: '#/components/schemas/access_date_time'
      example:
        email: "god@heaven.world"
        name: "god"
        createdAt: "1970-01-01T00:00:00"
        lastModifiedAt: "1970-01-01T00:00:00"

    # 에러 객체
    # 에러 응답 객체
    ErrorResponse:
      type: object
      properties:
        title:
          type: string
          description: HTTP 오류 설명
        detail:
          type: string
          description: 오류 발생 원인
        status:
          type: integer
          description: HTTP 오류 코드
        instance:
          type: string
          description: 오류가 발생한 요청 url
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FieldErrorResponse"
    # 필드 에러 객체
    FieldErrorResponse:
      type: object
      properties:
        field:
          type: string
          description: 오류가 발생한 속성
        reason:
          type: string
          description: 오류 발생 이유

    # 단순 값
    email:
      type: string
      format: email
      description: 이메일
      example: "god@heaven.world"
    password:
      type: string
      minLength: 1
      maxLength: 20
      description: 비밀번호
      example: "iamgod"
    username:
      type: string
      description: 사용자 이름
      minLength: 2
      maxLength: 50
      example: "god"
    access_date_time:
      type: object
      properties:
        createdAt:
          type: string
          example: "1970-01-01T00:00:00"
        lastModifiedAt:
          type: string
          example: "1970-01-01T00:00:00"

  # 공통 응답
  responses:
    # 403
    Forbidden:
      description: 리소스 접근 권한 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            title: Forbidden
            detail: 권한이 없습니다.
            status: 404
            instance: "{request-uri}"
            errors: []

  # 공통 파라미터
  parameters:
    UserIdInPath:
      name: userId
      in: path
      required: true
      schema:
        type: integer